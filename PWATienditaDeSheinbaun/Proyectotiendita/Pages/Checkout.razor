@page "/Checkout"
@using Blazored.LocalStorage
@inject ILocalStorageService LocalStorageService
@inherits LayoutComponentBase
@inject IJSRuntime JSRuntime

<h3>Checkout</h3>
<div class="row g-5">
    <div class="col-md-5 col-lg-4 order-md-last">
        <h4 class="d-flex justify-content-between align-items-center mb-3">
            <span class="text-primary">Tu carrito</span>
            <span class="badge bg-primary rounded-pill">@Productos.Count()</span>
        </h4>
        <ul class="list-group mb-3">
            @foreach (var item in Productos)
            {
                <li class="list-group-item d-flex justify-content-between lh-sm">
                    <div>
                        <h6 class="my-0">@item.Product.NombreP</h6>
                        <small class="text-muted">Cantidad: @item.Cantidad</small>
                    </div>
                    <span class="text-muted">@Costoproducto(item).ToString("C")</span>
                </li>
            }
            <li class="list-group-item d-flex justify-content-between">
                <span>Envío</span>
                <strong>@Envio.ToString("C")</strong>
            </li>
            <li class="list-group-item d-flex justify-content-between">
                <span>Total</span>
                <strong>@TotalCompra.ToString("C")</strong>
            </li>
        </ul>
    </div>
    <div class="col-md-7 col-lg-8">
        <Paypalbutton TotalCompra="TotalCompra" />

    </div>
</div>

@code {
    private List<CartItem> Productos = new List<CartItem>();

    protected override async Task OnInitializedAsync()
    {
        // Obtén los productos del carrito desde el almacenamiento local
        var cart = await LocalStorageService.GetItemAsync<List<CartItem>>("cart");
        Productos = cart ?? new List<CartItem>();
    }

    private decimal Costoproducto(CartItem item) => item.Cantidad * (decimal)item.Product.Precio;

    private decimal TotalSubtotal => Productos.Sum(Costoproducto);
    private decimal IVA => TotalSubtotal * 0.10m;
    private decimal Envio => 25.50m;
    public decimal TotalCompra => TotalSubtotal + Envio + IVA;


   
}
