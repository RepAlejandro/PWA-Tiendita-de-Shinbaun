@page "/carrito"
@using Blazored.LocalStorage
@using MongoAPIWeb.Model
@inherits LayoutComponentBase
@inject IProductService ProductService
@inject NavigationManager NavigationManager

<div class="container-fluid">
    <h1 class="text-center display-3">Carrito de Compras</h1>

    <div class="row row-cols-2">
        <div class="col-md-7">
            <h2 class="text-center mt-3"><small class="text-body-secondary">Lista de Productos</small></h2>
            <table class="table table-hover">
                <thead>
                    <tr>
                        <th scope="col" class="text-center">Imagen</th>
                        <th scope="col" class="text-center">Nombre</th>
                        <th scope="col" class="text-center">Cantidad</th>
                        <th scope="col" class="text-center">Precio</th>
                    </tr>
                </thead>
                @if (Productos == null || !Productos.Any())
                {
                    <p>No hay productos en el carrito.</p>
                }
                else
                {
                    <tbody>
                        @foreach (var item in Productos)
                        {
                            if (item?.Product == null)
                            {
                                <tr>
                                    <td colspan="4" class="text-center text-danger">Producto no disponible</td>
                                </tr>
                                continue; // Salta al siguiente ítem si es nulo
                            }
                            <tr class="mx-auto">
                                <th scope="row" class="w-25 border-1">
                                    <img src="@item.Product.Imagen" class="rounded float-start w-75 border-1" />
                                </th>
                                <td class="text-center border-1">@item.Product.NombreP</td>
                                <td class="border-1">
                                    <div class="d-flex align-items-center justify-content-center btn-group">
                                        <button class="d-flex border-0" type="button" @onclick="() => ChangeQuantity(item, -1)">
                                            <i class="bi bi-dash"></i>
                                        </button>
                                        <input type="number" class="form-control text-center border-1 w-25" min="1" max="5" value="@item.Cantidad" readonly />
                                        <button class="d-flex border-0" type="button" @onclick="() => ChangeQuantity(item, 1)">
                                            <i class="bi bi-plus"></i>
                                        </button>
                                    </div>
                                    <div class="p-2">
                                        <button class="btn-danger d-flex mx-auto align-items-center" data-bs-toggle="modal" data-bs-target="#exampleModal">
                                            <i class="bi bi-trash-fill"></i>
                                        </button>
                                        <div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
                                            <div class="modal-dialog modal-dialog-centered">
                                                <div class="modal-content">
                                                    <div class="modal-header">
                                                        <h1 class="modal-title fs-5" id="exampleModalLabel">Eliminar Producto</h1>
                                                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                                    </div>
                                                    <div class="modal-body">
                                                        <p class="display-6">Estas Seguro de Eliminar el Producto?</p>
                                                    </div>
                                                    <div class="modal-footer">
                                                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                                                        <button type="button" class="btn btn-danger" data-bs-dismiss="modal" @onclick="() => borrar(item)">Eliminar</button>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </td>
                                <td class="text-center border-1 p-1">@Costoproducto(item).ToString("C")</td>
                            </tr>
                        }
                    </tbody>
                }
            </table>
        </div>

        <div class="col-md-4 ms-3 rounded border shadow">
            <h2 class="text-center mt-3"><small class="text-body-secondary">Resumen del Pedido</small></h2>
            <ul class="list-group list-group-flush">
                <li class="list-group-item d-flex justify-content-between p-2">
                    <h3>Subtotal:</h3>
                    <span class="h4"><mark>@TotalSubtotal.ToString("F2")</mark></span>
                </li>
                <li class="list-group-item d-flex justify-content-between p-2">
                    <h3>I.V.A:</h3>
                    <span class="h4"><mark>@TotalIVA.ToString("F2")</mark></span>
                </li>
                <li class="list-group-item d-flex justify-content-between p-2">
                    <h3>Envio:</h3>
                    <span class="h4"><mark>@Envio.ToString("F2")</mark></span>
                </li>
                <li class="list-group-item d-flex justify-content-between p-2">
                    <h3>Descuento:</h3>
                    <span class="h4"><mark>@DescuentoTotal().ToString("F2")</mark></span>
                </li>
                <li class="list-group-item d-flex justify-content-between p-2">
                    <h3>Total:</h3>
                    <span class="h4"><mark>@TotalCompra.ToString("F2")</mark></span>
                </li>
            </ul>
            <div class="d-md-flex justify-content-center mt-3 p-1">
                <a class="btn btn-primary" @onclick="IrAlCheckout">Ir al checkout</a>
            </div>
        </div>
    </div>
</div>

@code {
    [Inject] private ILocalStorageService LocalStorageService { get; set; }

    private List<CartItem> Productos = new List<CartItem>();

    protected override async Task OnInitializedAsync()
    {
        // Obtén los productos del carrito desde el almacenamiento local
        var cart = await LocalStorageService.GetItemAsync<List<CartItem>>("cart");
        if (cart != null)
        {
            Productos = cart.Where(item => item?.Product != null).ToList();
        }
        else
        {
            Productos = new List<CartItem>();
        }
    }

    private decimal Costoproducto(CartItem item) => item.Cantidad * (decimal)item.Product.Precio;

    private decimal TotalSubtotal => Productos.Sum(Costoproducto);
    private decimal TotalIVA => TotalSubtotal * 0.10m;
    private decimal Envio => 25.50m;
    private decimal TotalCompra => TotalSubtotal + TotalIVA + Envio;

    private void ChangeQuantity(CartItem item, int change)
    {
        var nuevaCantidad = item.Cantidad + change;
        if (nuevaCantidad >= 1 && nuevaCantidad <= 5)
        {
            item.Cantidad = nuevaCantidad;
            SaveCart();
        }
    }

    private async Task SaveCart()
    {
        var cartData = new
        {
            Productos,
            TotalCompra = TotalCompra.ToString("F2")
        };

        await LocalStorageService.SetItemAsync("cartData", cartData);
    }

    private void borrar(CartItem item)
    {
        Productos.Remove(item);
        SaveCart();
    }

    private decimal DescuentoTotal()
    {
        return Productos.Where(p => p.Cantidad >= 3)
                        .Sum(p => Costoproducto(p) * 0.10m);
    }

    private async Task IrAlCheckout()
    {
        // Obtiene el carrito desde LocalStorage
        var cart = await LocalStorageService.GetItemAsync<List<CartItem>>("cart");

        if (cart != null && cart.Any())
        {
            foreach (var cartItem in cart)
            {
                try
                {
                    // Reduce el stock basándose en la cantidad en el carrito
                    cartItem.Product.Stock -= cartItem.Cantidad;

                    // Asegúrate de que el stock no sea negativo
                    cartItem.Product.Stock = cartItem.Product.Stock < 0 ? 0 : cartItem.Product.Stock;

                    // Llama a SaveProduct para guardar los cambios en la base de datos
                    await ProductService.SaveProduct(cartItem.Product);
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error al actualizar el stock de {cartItem.Product.NombreP}: {ex.Message}");
                }
            }
        }

        // Limpia el carrito o redirige al usuario después de confirmar la compra
        await LocalStorageService.SetItemAsync("cart", Productos);
        NavigationManager.NavigateTo("/Checkout"); // Redirige a la página principal o de confirmación
    }
}
}
